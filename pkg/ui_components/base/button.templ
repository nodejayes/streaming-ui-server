package base

import "fmt"

type ButtonOptions struct {
  ID               string
  Class            string
	Style            string
	OnClick          string
	OnContextMenu    string
	OnDoubleClick    string
	OnMouseDown      string
	OnMouseEnter     string
	OnMouseLeave     string
	OnMouseMove      string
	OnMouseOut       string
	OnMouseUp        string
	OnKeyUp          string
	OnKeyDown        string
	OnFocus          string
	OnFocusIn        string
	OnFocusOut       string
	ClickDelay       int
	DoubleClickDelay int
	ContextMenuDelay int
	MouseEnterDelay  int
	MouseLeaveDelay  int
	MouseMoveDelay   int
	MouseDownDelay   int
	MouseUpDelay     int
	MouseOutDelay    int
	KeyUpDelay       int
	KeyDownDelay     int
	FocusDelay       int
	FocusInDelay     int
	FocusOutDelay    int
}

templ Button(options ButtonOptions, content templ.Component) {
  <button
		if options.ID != "" {
				id={ options.ID }
		}
		if options.Class != "" {
			class={ options.Class }
		}
		if options.Style != "" {
			style={ options.Style }
		}

		if options.OnClick != "" {
			lrClickAction={ options.OnClick }
		}
		if options.ClickDelay > 0 {
		  lrClickDelay={ fmt.Sprintf("%v", options.ClickDelay) }
		}

		if options.OnDoubleClick != "" {
			lrDblClickAction={ options.OnDoubleClick }
		}
		if options.DoubleClickDelay > 0 {
		  lrDoubleClickDelay={ fmt.Sprintf("%v", options.DoubleClickDelay) }
		}

		if options.OnContextMenu != "" {
			lrContextMenuAction={ options.OnContextMenu }
		}
		if options.ContextMenuDelay > 0 {
			lrContextMenuDelay={ fmt.Sprintf("%v", options.ContextMenuDelay) }
		}

		if options.OnMouseEnter != "" {
			lrMouseEnterAction={ options.OnMouseEnter }
		}
		if options.MouseEnterDelay > 0 {
		  lrMouseEnterDelay={ fmt.Sprintf("%v", options.MouseEnterDelay) }
		}

		if options.OnMouseLeave != "" {
			lrMouseLeaveAction={ options.OnMouseLeave }
		}
		if options.MouseLeaveDelay > 0 {
		  lrMouseLeaveDelay={ fmt.Sprintf("%v", options.MouseLeaveDelay) }
		}

		if options.OnMouseMove != "" {
			lrMouseMoveAction={ options.OnMouseMove }
		}
		if options.MouseMoveDelay > 0 {
		  lrMouseMoveDelay={ fmt.Sprintf("%v", options.MouseMoveDelay) }
		}

		if options.OnMouseDown != "" {
			lrMouseDownAction={ options.OnMouseDown }
		}
		if options.MouseDownDelay > 0 {
		  lrMouseDownDelay={ fmt.Sprintf("%v", options.MouseDownDelay) }
		}

		if options.OnMouseUp != "" {
			lrMouseUpAction={ options.OnMouseUp }
		}
		if options.MouseUpDelay > 0 {
		  lrMouseUpDelay={ fmt.Sprintf("%v", options.MouseUpDelay) }
		}

		if options.OnMouseOut != "" {
			lrMouseOutAction={ options.OnMouseOut }
		}
		if options.MouseOutDelay > 0 {
		  lrMouseOutDelay={ fmt.Sprintf("%v", options.MouseOutDelay) }
		}

		if options.OnKeyUp != "" {
			lrKeyUpAction={ options.OnKeyUp }
		}
		if options.KeyUpDelay > 0 {
		  lrKeyUpDelay={ fmt.Sprintf("%v", options.KeyUpDelay) }
		}

		if options.OnKeyDown != "" {
			lrKeyDownAction={ options.OnKeyDown }
		}
		if options.KeyDownDelay > 0 {
		  lrKeyDownDelay={ fmt.Sprintf("%v", options.KeyDownDelay) }
		}

		if options.OnFocus != "" {
			lrFocusAction={ options.OnFocus }
		}
		if options.FocusDelay > 0 {
		  lrFocusDelay={ fmt.Sprintf("%v", options.FocusDelay) }
		}

		if options.OnFocusIn != "" {
			lrFocusInAction={ options.OnFocusIn }
		}
		if options.FocusInDelay > 0 {
		  lrFocusInDelay={ fmt.Sprintf("%v", options.FocusInDelay) }
		}

		if options.OnFocusOut != "" {
			lrFocusOutAction={ options.OnFocusOut }
		}
		if options.FocusOutDelay > 0 {
		  lrFocusOutDelay={ fmt.Sprintf("%v", options.FocusOutDelay) }
		}
	>{! content }</button>
}